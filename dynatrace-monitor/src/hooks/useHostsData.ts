import { useState, useEffect, useCallback, useRef } from 'react';
import { Host, ApiResponse } from '../api/types';
import { api } from '../api';
import { ENDPOINTS } from '../api/endpoints';

// Cache keys
const HOSTS_CACHE_KEY = 'hosts_data_cache_v3'; // Incr√©ment√© pour forcer la r√©initialisation du cache
const MZ_ADMIN_VERSION_KEY = 'mz_admin_version'; // Pour suivre les changements de configuration
const FIRST_LOAD_DONE_KEY = 'hosts_first_load_done'; // Pour suivre si le premier chargement a √©t√© effectu√©

/**
 * Hook personnalis√© pour g√©rer les donn√©es des hosts
 * Impl√©mente une strat√©gie de mise en cache durable pour les donn√©es
 * La MZ admin est r√©cup√©r√©e depuis le backend (configur√©e dans le fichier .env)
 * Le chargement n'est effectu√© qu'une seule fois et uniquement rafra√Æchi manuellement
 */
export function useHostsData() {
  // √âtats pour stocker les donn√©es et le statut
  const [hosts, setHosts] = useState<Host[]>([]);
  const [totalHosts, setTotalHosts] = useState<number>(0);
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [isInitialLoading, setIsInitialLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);
  const [lastRefreshTime, setLastRefreshTime] = useState<Date | null>(null);
  // √âtat pour stocker le MZ admin actif
  const [mzAdmin, setMzAdmin] = useState<string>('');
  // √âtat pour suivre si la configuration a √©t√© charg√©e
  const [configLoaded, setConfigLoaded] = useState<boolean>(false);
  // √âtat pour suivre la phase de chargement actuelle
  const [loadingPhase, setLoadingPhase] = useState<string>('Initialisation...');

  // R√©f√©rence pour les requ√™tes en cours
  const pendingRequestRef = useRef<boolean>(false);

  // Fonction pour lire la configuration mzadmin depuis le backend ou le cache persistent
  const fetchMzAdminConfig = useCallback(async () => {
    try {
      console.log('üîç [useHostsData] fetchMzAdminConfig d√©marr√©');
      setIsLoading(true);
      setLoadingPhase('Connexion au serveur Dynatrace...');
      
      // 1. D'abord, v√©rifier si nous avons d√©j√† la valeur en m√©moire
      if (mzAdmin) {
        console.log(`üì¶ [useHostsData] R√©utilisation de la MZ Admin d√©j√† en m√©moire: ${mzAdmin}`);
        setConfigLoaded(true);
        return mzAdmin;
      }

      // 2. Continuer directement √† la r√©cup√©ration depuis le backend
      // N'utilisez PAS le cache pour la valeur de MZ_ADMIN - toujours r√©cup√©rer depuis le backend
      // Seulement le cache des donn√©es de hosts est conserv√©
      
      // Sinon, essayer de r√©cup√©rer depuis le backend avec r√©essais
      let attempts = 0;
      const maxAttempts = 3;
      let lastError = null;
      
      while (attempts < maxAttempts) {
        try {
          attempts++;
          console.log(`üîÑ [useHostsData] Tentative ${attempts}/${maxAttempts} de r√©cup√©ration MZ Admin`);
          // Utiliser le bon endpoint pour r√©cup√©rer la MZ admin
          const response = await api.get<{mzadmin: string}>('/mz-admin', {
            params: { nocache: Date.now() }
          }, false);
          console.log('üì° [useHostsData] R√©ponse API /mz-admin:', response);
          
          if (response.error) {
            lastError = response.error;
            console.warn(`‚ùå [useHostsData] Tentative ${attempts}/${maxAttempts} √©chou√©e: ${response.error}`);
          } else {
            const mzAdminValue = response.data?.mzadmin || '';
            if (!mzAdminValue) {
              lastError = 'Aucune Management Zone admin configur√©e dans le backend.';
              console.warn(`‚ö†Ô∏è [useHostsData] Tentative ${attempts}/${maxAttempts}: MZ admin vide re√ßue`);
            } else {
              console.log(`‚úÖ [useHostsData] MZ Admin r√©cup√©r√©e depuis le backend: ${mzAdminValue}`);
              setMzAdmin(mzAdminValue);
              setConfigLoaded(true);
              return mzAdminValue;
            }
          }
          
          // Pause avant la prochaine tentative
          if (attempts < maxAttempts) {
            await new Promise(resolve => setTimeout(resolve, 1000 * attempts));
          }
        } catch (attemptError) {
          lastError = attemptError;
          console.warn(`Tentative ${attempts}/${maxAttempts} √©chou√©e avec erreur:`, attemptError);
          if (attempts < maxAttempts) {
            await new Promise(resolve => setTimeout(resolve, 1000 * attempts));
          }
        }
      }
      
      // Toutes les tentatives ont √©chou√©
      console.error('‚ùå [useHostsData] Erreur apr√®s plusieurs tentatives:', lastError);
      // Ne pas d√©finir d'erreur si nous avons d√©j√† des donn√©es hosts charg√©es
      if (hosts.length === 0) {
        if (typeof lastError === 'string') {
          setError(lastError);
        } else {
          setError('Erreur de communication avec le backend.');
        }
      } else {
        console.log('‚ö†Ô∏è [useHostsData] Erreur MZ Admin mais conservation des donn√©es hosts existantes');
      }
      setConfigLoaded(true);
      return '';
    } catch (error) {
      console.error('‚ùå [useHostsData] Erreur globale lors de la r√©cup√©ration de la config MZ admin:', error);
      // Ne pas d√©finir d'erreur si nous avons d√©j√† des donn√©es hosts charg√©es
      if (hosts.length === 0) {
        setError('Erreur de communication avec le backend.');
      } else {
        console.log('‚ö†Ô∏è [useHostsData] Erreur globale mais conservation des donn√©es hosts existantes');
      }
      setConfigLoaded(true);
      return '';
    } finally {
      setIsLoading(false);
    }
  }, [mzAdmin, hosts.length]);

  // Fonction pour sauvegarder les donn√©es dans le cache persistant
  const saveToCache = useCallback((hostsData: Host[]) => {
    try {
      // Sauvegarder les donn√©es dans le localStorage avec la MZ admin associ√©e
      localStorage.setItem(HOSTS_CACHE_KEY, JSON.stringify({
        mzAdmin,
        hosts: hostsData,
        timestamp: Date.now(),
        total: hostsData.length
      }));
      console.log(`Donn√©es de ${hostsData.length} hosts sauvegard√©es dans le cache`);
    } catch (error) {
      console.error('Erreur lors de la sauvegarde du cache:', error);
    }
  }, [mzAdmin]);

  // Fonction pour charger les donn√©es depuis le cache
  const loadFromCache = useCallback(() => {
    try {
      const cachedData = localStorage.getItem(HOSTS_CACHE_KEY);
      
      if (cachedData) {
        const parsedData = JSON.parse(cachedData);
        
        // On utilise le cache uniquement pour les donn√©es des hosts, pas pour la MZ
        if (parsedData.hosts && Array.isArray(parsedData.hosts) && parsedData.hosts.length > 0) {
          console.log(`Utilisation des donn√©es en cache pour ${parsedData.hosts.length} hosts`);
          
          setHosts(parsedData.hosts);
          setTotalHosts(parsedData.total || parsedData.hosts.length);
          setLastRefreshTime(new Date(parsedData.timestamp));
          
          // Ne pas mettre √† jour la MZ Admin depuis le cache
          // La valeur de MZ Admin doit toujours venir du backend, pas du cache
          
          return true;
        }
      }
      return false;
    } catch (error) {
      console.error('Erreur lors du chargement du cache:', error);
      return false;
    }
  }, []);

  // Fonction pour rafra√Æchir les donn√©es depuis l'API
  const refreshData = useCallback(async (forceRefresh: boolean = false) => {
    console.log('üîÑ [useHostsData] refreshData appel√© - mzAdmin:', mzAdmin, 'forceRefresh:', forceRefresh);
    
    // V√©rifier si une MZ admin est configur√©e
    if (!mzAdmin) {
      console.log('‚ùå [useHostsData] Aucune MZ Admin configur√©e');
      setError('Impossible de charger les donn√©es des h√¥tes. Veuillez rafra√Æchir la page.');
      
      // Essayer de charger depuis le cache m√™me sans MZ admin actuelle
      try {
        const fallbackCache = localStorage.getItem(HOSTS_CACHE_KEY);
        if (fallbackCache) {
          const parsedCache = JSON.parse(fallbackCache);
          if (parsedCache.hosts && Array.isArray(parsedCache.hosts) && parsedCache.hosts.length > 0) {
            console.log('üì¶ [useHostsData] Utilisation des donn√©es en cache de secours');
            setHosts(parsedCache.hosts);
            setTotalHosts(parsedCache.total || parsedCache.hosts.length);
            setLastRefreshTime(new Date(parsedCache.timestamp));
            if (parsedCache.mzAdmin) {
              setMzAdmin(parsedCache.mzAdmin);
              return parsedCache.hosts;
            }
          }
        }
      } catch (e) {
        console.error('‚ùå [useHostsData] Erreur lors de la tentative de r√©cup√©ration du cache de secours:', e);
      }
      
      return null;
    }

    // √âviter les requ√™tes multiples simultan√©es
    if (pendingRequestRef.current && !forceRefresh) {
      return null;
    }

    pendingRequestRef.current = true;
    setIsLoading(true);
    setError(null);

    try {
      console.log(`üöÄ [useHostsData] Chargement des donn√©es pour la MZ admin: ${mzAdmin}`);
      setLoadingPhase('Authentification et validation MZ...');
      
      // D√©finir la MZ actuelle sur la MZ admin
      console.log('üîß [useHostsData] D√©finition de la MZ...');
      const setMzResponse = await api.setManagementZone(mzAdmin);
      console.log('üîß [useHostsData] R√©ponse setManagementZone:', setMzResponse);
      
      // R√©cup√©rer les hosts pour cette MZ
      setLoadingPhase('Scanning des h√¥tes disponibles...');
      console.log('üì° [useHostsData] R√©cup√©ration des hosts...');
      const hostsResponse: ApiResponse<Host[]> = await api.getHosts();
      console.log('üì° [useHostsData] R√©ponse getHosts:', hostsResponse);
      
      if (hostsResponse.error) {
        console.error('‚ùå [useHostsData] Erreur dans la r√©ponse hosts:', hostsResponse.error);
        throw new Error(hostsResponse.error);
      }
      
      const hostsData = hostsResponse.data || [];
      console.log(`‚úÖ [useHostsData] ${hostsData.length} hosts r√©cup√©r√©s pour ${mzAdmin}`, hostsData);
      
      // Simuler une collecte des m√©triques pour l'UX
      setLoadingPhase('Collecte des m√©triques syst√®me...');
      
      // Mettre √† jour les √©tats
      setHosts(hostsData);
      setTotalHosts(hostsData.length);
      
      // Marquer le moment du rafra√Æchissement
      const refreshTime = new Date();
      setLastRefreshTime(refreshTime);
      
      // Sauvegarder dans le cache persistant
      setLoadingPhase('Finalisation et mise en cache...');
      saveToCache(hostsData);
      
      console.log('‚úÖ [useHostsData] Donn√©es mises √† jour avec succ√®s');
      return hostsData;
    } catch (error) {
      console.error(`‚ùå [useHostsData] Erreur lors du chargement des hosts pour ${mzAdmin}:`, error);
      // Ne pas d√©finir d'erreur si nous avons d√©j√† des donn√©es en cache
      if (hosts.length === 0) {
        setError('Erreur lors du chargement des donn√©es. Veuillez r√©essayer.');
      } else {
        console.log('‚ö†Ô∏è [useHostsData] Erreur mais conservation des donn√©es existantes');
      }
      return null;
    } finally {
      setIsLoading(false);
      setIsInitialLoading(false);
      pendingRequestRef.current = false;
    }
  }, [mzAdmin, saveToCache, hosts.length]);

  // Fonction pour v√©rifier si le premier chargement a d√©j√† √©t√© effectu√©
  const isFirstLoadDone = useCallback(() => {
    return localStorage.getItem(FIRST_LOAD_DONE_KEY) === 'true';
  }, []);

  // Fonction pour marquer le premier chargement comme effectu√©
  const markFirstLoadDone = useCallback(() => {
    localStorage.setItem(FIRST_LOAD_DONE_KEY, 'true');
  }, []);

  // Effet pour charger la configuration et les donn√©es d√®s que l'utilisateur arrive sur la page
  useEffect(() => {
    console.log('üöÄ [useHostsData] Initialisation du chargement automatique des hosts d√®s l\'arriv√©e sur la page');
    const loadData = async () => {
      // IMPORTANT: Toujours r√©cup√©rer d'abord la config mzadmin depuis le backend
      // pour garantir qu'on a la valeur la plus r√©cente du .env
      console.log('üìã [useHostsData] R√©cup√©ration de la config MZ Admin...');
      const loadedMzAdmin = await fetchMzAdminConfig();
      console.log('üìã [useHostsData] MZ Admin charg√©e:', loadedMzAdmin);
      
      // Apr√®s avoir r√©cup√©r√© la MZ du backend, v√©rifier si on a un cache pour les hosts
      console.log('üîç [useHostsData] V√©rification du cache...');
      const cacheLoaded = loadFromCache();
      console.log('üîç [useHostsData] Cache charg√©:', cacheLoaded);
      
      // V√©rifier si c'est le premier chargement
      const firstLoadDone = isFirstLoadDone();
      console.log('üîç [useHostsData] Premier chargement d√©j√† effectu√©:', firstLoadDone);
      
      if (!firstLoadDone) {
        // Premier chargement: charger depuis l'API si MZ admin est configur√©e et pas de cache
        console.log('üÜï [useHostsData] Premier chargement des donn√©es hosts');
        if (loadedMzAdmin && !cacheLoaded) {
          console.log('üì° [useHostsData] Chargement depuis API (MZ configur√©e, pas de cache)');
          await refreshData(true);
        } else if (!loadedMzAdmin && !cacheLoaded) {
          console.log('üì° [useHostsData] Tentative de chargement sans MZ');
          refreshData(true);
        }
        
        // Marquer le premier chargement comme effectu√© m√™me si nous avons utilis√© le cache
        markFirstLoadDone();
      } else if (cacheLoaded) {
        // Si ce n'est pas le premier chargement et que nous avons des donn√©es en cache,
        // utiliser uniquement le cache sans rafra√Æchissement automatique
        console.log('üì¶ [useHostsData] Utilisation des donn√©es en cache sans rafra√Æchissement automatique');
      } else if (loadedMzAdmin && !cacheLoaded) {
        // Si pas de donn√©es en cache mais MZ admin configur√©e, 
        // charger les donn√©es (cas rare o√π le cache aurait √©t√© effac√©)
        console.log('üì° [useHostsData] Cache non trouv√©, chargement des donn√©es depuis l\'API');
        await refreshData(true);
      }
    };
    
    // Ex√©cuter loadData et l'enregistrer pour le nettoyage
    let mounted = true;
    const loadingPromise = loadData();
    
    loadingPromise.catch(err => {
      if (mounted) {
        console.error('Erreur lors du chargement des donn√©es:', err);
        setError('Impossible de charger les donn√©es des h√¥tes. Veuillez rafra√Æchir la page.');
        
        // Une derni√®re tentative de r√©cup√©ration depuis le cache en cas d'erreur
        loadFromCache();
      }
    });
    
    // Nettoyage lors du d√©montage
    return () => {
      mounted = false;
    };
  }, [fetchMzAdminConfig, loadFromCache, refreshData, isFirstLoadDone, markFirstLoadDone]);
  
  // Effet secondaire pour sauvegarder les donn√©es dans le cache
  useEffect(() => {
    // Si nous avons des hosts en m√©moire, sauvegardons-les dans le cache
    if (hosts.length > 0 && mzAdmin) {
      saveToCache(hosts);
      
      // Sauvegarder la version de MZ pour r√©f√©rence future
      const previousMzVersion = localStorage.getItem(MZ_ADMIN_VERSION_KEY);
      if (previousMzVersion !== mzAdmin) {
        console.log(`Mise √† jour de la r√©f√©rence MZ Admin: ${previousMzVersion} -> ${mzAdmin}`);  
        localStorage.setItem(MZ_ADMIN_VERSION_KEY, mzAdmin);
      }
    }
  }, [hosts, mzAdmin, saveToCache]);

  // Retourner les donn√©es et fonctions n√©cessaires
  return {
    hosts,
    totalHosts,
    isLoading,
    isInitialLoading,
    error,
    lastRefreshTime,
    mzAdmin,
    configLoaded,
    refreshData,
    isFirstLoadDone,
    loadingPhase
  };
}
