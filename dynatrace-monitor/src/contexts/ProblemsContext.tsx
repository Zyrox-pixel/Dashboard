import React, { createContext, useContext, useState, useEffect, useRef } from 'react';
import { Problem, ProblemResponse } from '../api/types';
import { api } from '../api';

interface ProblemsState {
  vfgProblems: Problem[];
  vfeProblems: Problem[];
  vfgProblems72h: Problem[];
  vfeProblems72h: Problem[];
  isLoading: {
    vfg: boolean;
    vfe: boolean;
  };
}

interface ProblemsContextType extends ProblemsState {
  refreshVFG: (force?: boolean) => Promise<void>;
  refreshVFE: (force?: boolean) => Promise<void>;
  refreshAll: (force?: boolean) => Promise<void>;
  getAggregatedProblems: () => Problem[];
  getAggregatedProblems72h: () => Problem[];
}

const ProblemsContext = createContext<ProblemsContextType | undefined>(undefined);

/**
 * Transforme les donn√©es brutes de probl√®me en structure Problem unifi√©e
 */
const transformProblemData = (problem: ProblemResponse): Problem => {
  // Extraire le nom de l'h√¥te √† partir des entit√©s impact√©es (priorit√©)
  let hostName = '';
  
  // PRIORIT√â 1: Utiliser directement impactedEntities
  if (problem.impactedEntities && Array.isArray(problem.impactedEntities)) {
    const hostEntity = problem.impactedEntities.find(entity => 
      entity.entityId && entity.entityId.type === 'HOST' && entity.name);
    if (hostEntity) {
      hostName = hostEntity.name;
    }
  }
  
  // PRIORIT√â 2: Si pas trouv√©, utiliser le champ host ou impacted s'ils existent
  if (!hostName) {
    if (problem.host && problem.host !== "Non sp√©cifi√©") {
      hostName = problem.host;
    } else if (problem.impacted && problem.impacted !== "Non sp√©cifi√©") {
      hostName = problem.impacted;
    }
  }
  
  return {
    id: problem.id || `PROB-${Math.random().toString(36).substr(2, 9)}`,
    title: problem.title || "Probl√®me inconnu",
    code: problem.id ? problem.id.substring(0, 7) : "UNKNOWN",
    subtitle: `${problem.zone || "Non sp√©cifi√©"} - Impact: ${problem.impact || "INCONNU"}`,
    time: problem.start_time ? `Depuis ${problem.start_time}` : "R√©cent",
    type: problem.impact === "INFRASTRUCTURE" ? "Probl√®me d'Infrastructure" : "Probl√®me de Service",
    status: problem.status === "OPEN" ? "critical" : "warning",
    impact: problem.impact === "INFRASTRUCTURE" ? "√âLEV√â" : problem.impact === "SERVICE" ? "MOYEN" : "FAIBLE",
    zone: problem.zone || "Non sp√©cifi√©",
    servicesImpacted: problem.affected_entities ? problem.affected_entities.toString() : "0",
    dt_url: problem.dt_url || "#",
    duration: problem.duration || "",
    resolved: problem.resolved || false,
    host: hostName,
    impacted: hostName,
    impactedEntities: problem.impactedEntities,
    rootCauseEntity: problem.rootCauseEntity
  };
};

export const ProblemsProvider: React.FC<{children: React.ReactNode}> = ({ children }) => {
  // √âtats s√©par√©s pour chaque type de probl√®me
  const [vfgProblems, setVfgProblems] = useState<Problem[]>([]);
  const [vfeProblems, setVfeProblems] = useState<Problem[]>([]);
  const [vfgProblems72h, setVfgProblems72h] = useState<Problem[]>([]);
  const [vfeProblems72h, setVfeProblems72h] = useState<Problem[]>([]);
  const [isLoading, setIsLoading] = useState({ vfg: false, vfe: false });
  
  // Cache pour √©viter les requ√™tes r√©p√©t√©es
  const lastFetchTimeRef = useRef({
    vfg: 0,
    vfe: 0
  });
  
  // Rafra√Æchir les probl√®mes VFG
  const refreshVFG = async (force = false) => {
    // V√©rifier si un chargement r√©cent a eu lieu (moins de 15 secondes)
    const now = Date.now();
    if (!force && now - lastFetchTimeRef.current.vfg < 15000) {
      console.log("üîµ Utilisation du cache pour VFG (r√©cent)");
      return;
    }
    
    setIsLoading(prev => ({ ...prev, vfg: true }));
    
    try {
      console.log("üîµ Chargement des donn√©es VFG...");
      
      // R√©cup√©rer les probl√®mes actifs
      const activeProblemsResponse = await api.getProblems("OPEN", "-60d", "vfg", force);
      if (!activeProblemsResponse.error && activeProblemsResponse.data) {
        const transformedProblems = Array.isArray(activeProblemsResponse.data) 
          ? activeProblemsResponse.data.map(transformProblemData)
          : [];
        
        console.log(`üîµ Probl√®mes actifs VFG r√©cup√©r√©s: ${transformedProblems.length}`);
        setVfgProblems(transformedProblems);
      }
      
      // R√©cup√©rer les probl√®mes des 72 derni√®res heures
      const problems72hResponse = await api.getProblems72h("vfg", undefined, force);
      if (!problems72hResponse.error && problems72hResponse.data) {
        const transformedProblems = Array.isArray(problems72hResponse.data) 
          ? problems72hResponse.data.map(transformProblemData)
          : [];
        
        console.log(`üîµ Probl√®mes 72h VFG r√©cup√©r√©s: ${transformedProblems.length}`);
        setVfgProblems72h(transformedProblems);
      }
      
      // Mettre √† jour l'horodatage
      lastFetchTimeRef.current.vfg = now;
      
    } catch (error) {
      console.error("‚ùå Erreur lors de la r√©cup√©ration des probl√®mes VFG:", error);
    } finally {
      setIsLoading(prev => ({ ...prev, vfg: false }));
    }
  };
  
  // Rafra√Æchir les probl√®mes VFE
  const refreshVFE = async (force = false) => {
    // V√©rifier si un chargement r√©cent a eu lieu (moins de 15 secondes)
    const now = Date.now();
    if (!force && now - lastFetchTimeRef.current.vfe < 15000) {
      console.log("üü† Utilisation du cache pour VFE (r√©cent)");
      return;
    }
    
    setIsLoading(prev => ({ ...prev, vfe: true }));
    
    try {
      console.log("üü† Chargement des donn√©es VFE...");
      
      // R√©cup√©rer les probl√®mes actifs
      const activeProblemsResponse = await api.getProblems("OPEN", "-60d", "vfe", force);
      if (!activeProblemsResponse.error && activeProblemsResponse.data) {
        const transformedProblems = Array.isArray(activeProblemsResponse.data) 
          ? activeProblemsResponse.data.map(transformProblemData)
          : [];
        
        console.log(`üü† Probl√®mes actifs VFE r√©cup√©r√©s: ${transformedProblems.length}`);
        setVfeProblems(transformedProblems);
      }
      
      // R√©cup√©rer les probl√®mes des 72 derni√®res heures
      const problems72hResponse = await api.getProblems72h("vfe", undefined, force);
      if (!problems72hResponse.error && problems72hResponse.data) {
        const transformedProblems = Array.isArray(problems72hResponse.data) 
          ? problems72hResponse.data.map(transformProblemData)
          : [];
        
        console.log(`üü† Probl√®mes 72h VFE r√©cup√©r√©s: ${transformedProblems.length}`);
        setVfeProblems72h(transformedProblems);
      }
      
      // Mettre √† jour l'horodatage
      lastFetchTimeRef.current.vfe = now;
      
    } catch (error) {
      console.error("‚ùå Erreur lors de la r√©cup√©ration des probl√®mes VFE:", error);
    } finally {
      setIsLoading(prev => ({ ...prev, vfe: false }));
    }
  };
  
  // Rafra√Æchir tous les probl√®mes
  const refreshAll = async (force = false) => {
    console.log("üîÑ Rafra√Æchissement de tous les probl√®mes...");
    
    // Ex√©cuter les deux rafra√Æchissements en parall√®le
    await Promise.all([
      refreshVFG(force),
      refreshVFE(force)
    ]);
    
    console.log("‚úÖ Rafra√Æchissement complet termin√©");
  };
  
  // R√©cup√©rer tous les probl√®mes agr√©g√©s
  const getAggregatedProblems = () => {
    const problemMap = new Map<string, Problem>();
    
    // Agr√©ger les probl√®mes VFG
    vfgProblems.forEach(problem => {
      problemMap.set(problem.id, problem);
    });
    
    // Agr√©ger les probl√®mes VFE
    vfeProblems.forEach(problem => {
      problemMap.set(problem.id, problem);
    });
    
    return Array.from(problemMap.values());
  };
  
  // R√©cup√©rer tous les probl√®mes r√©cents agr√©g√©s
  const getAggregatedProblems72h = () => {
    const problemMap = new Map<string, Problem>();
    
    // Agr√©ger les probl√®mes VFG
    vfgProblems72h.forEach(problem => {
      problemMap.set(problem.id, problem);
    });
    
    // Agr√©ger les probl√®mes VFE
    vfeProblems72h.forEach(problem => {
      problemMap.set(problem.id, problem);
    });
    
    return Array.from(problemMap.values());
  };
  
  // Charger les donn√©es initiales imm√©diatement
  useEffect(() => {
    console.log("Initialisation du ProblemsContext - chargement imm√©diat des donn√©es");
    // Forcer le rechargement complet des donn√©es
    refreshAll(true);
  }, []); // eslint-disable-line react-hooks/exhaustive-deps
  
  const contextValue: ProblemsContextType = {
    vfgProblems,
    vfeProblems,
    vfgProblems72h,
    vfeProblems72h,
    isLoading,
    refreshVFG,
    refreshVFE,
    refreshAll,
    getAggregatedProblems,
    getAggregatedProblems72h
  };
  
  return (
    <ProblemsContext.Provider value={contextValue}>
      {children}
    </ProblemsContext.Provider>
  );
};

export const useProblems = () => {
  const context = useContext(ProblemsContext);
  if (context === undefined) {
    throw new Error('useProblems must be used within a ProblemsProvider');
  }
  return context;
};